"""
–ú–æ–¥—É–ª—å other_button —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
–∏ –¥–µ–π—Å—Ç–≤–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –±–æ—Ç–æ–º.
–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏, –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
"""
from datetime import datetime
import logging
import json
from logging.handlers import RotatingFileHandler
import os

import aiofiles
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    BufferedInputFile,
)
from aiogram.exceptions import TelegramForbiddenError

from src.utils.collecting_all_statistics import save_all_stats_to_excel
from src.utils.connect_api import get_user_by_card_code
from src.database.process_database_message import (
    get_id_message,
    get_id_message_user_type,
    get_type_message,
    get_unique_posts_per_user_type
)
from src.utils.read_json import read_json_file, read_json_keys_as_ints
from src.telegram_bot.states_class import (
    FormAsk,
    FormProduct,
    FormDiscontCard,
    FormSendingAdv,
    UserStates,
)
from src.utils.check import find_user_id, rate_limit
from src.database.process_database import (
    count_button,
    count_button_not_card,
    count_button_to_card,
    count_search_done_to_code_photo,
    count_search_done_to_code_product,
    count_search_done_to_code_text,
    count_search_done_to_name,
    count_users,
    count_users_agreed,
    count_users_not_card,
    count_users_to_card,
    count_users_unagreed,
    insert_data,
    popular_search_query,
    time_serch_popular,
)
from src.telegram_bot.menus import general_menu
from configs import config

logging.basicConfig(level=logging.INFO)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –≤ 8 –ú–ë
MAX_BYTES = 8 * 1024 * 1024  # 8 –ú–ë –≤ –±–∞–π—Ç–∞—Ö

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = RotatingFileHandler(
    "logs/other_button_log.log",
    maxBytes=MAX_BYTES,  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
    backupCount=30,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è
    encoding="utf-8",
)

# –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger('other_button_logger')
logger.addHandler(file_handler)

async def handle_privacy_agreement(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞
    –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª–∏—Ç–∏–∫–µ
    –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è" –∏ "–ù–µ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è",
    –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –§—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ `UserStates.privacy_agreement` –¥–ª—è
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é `insert_data` –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–≥–ª–∞—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ handle_privacy_agreement –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–ø–æ–ª—É—á–∏–ª –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.", 
        message.from_user.id, message.from_user.full_name
        )
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            url='https://example.com/politiks.pdf'
            )
        )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è" –∏ "–ù–µ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è"
    kb = [
        [KeyboardButton(text="–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")],
        [KeyboardButton(text="–ù–µ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ–≥–ª–∞—Å–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_sticker(
        chat_id=message.chat.id,
        sticker="CAACAgQAAxkBAAEMfyNmlSYzYXn-yZd4Qxo6Dm2abZ1_OQAC6A0AAsd86FCeNgGtJlhU-jUE"
        )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç –º–µ–Ω—è –∑–æ–≤—É—Ç gemma_bot!\n" 
        "–Ø ü§ñ-–ø–æ–º–æ—â–Ω–∏–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ì—Ä–æ–¥–Ω–æ.\n"
        "–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ —ç—Ç–æ–º —á–∞—Ç–µüòä\n"
        "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', –≤—ã –¥–∞—ë—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ "
        "–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n",
        reply_markup=keyboard
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    # –∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await message.answer(
        "–£–∑–Ω–∞—Ç—å –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=builder.as_markup()
    )
    await state.set_state(UserStates.privacy_agreement)

async def handle_privacy_agreement_if_not(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª–∏—Ç–∏–∫–µ
    –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è" –∏ "–ù–µ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è",
    –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –§—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ `UserStates.privacy_agreement` –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é `insert_data` –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–≥–ª–∞—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ handle_privacy_agreement_if_not –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–ø–æ–ª—É—á–∏–ª –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.", 
        message.from_user.id, message.from_user.full_name
        )
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
            url='https://example.com/politiks.pdf'
            )
        )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è" –∏ "–ù–µ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è"
    kb = [
        [KeyboardButton(text="–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è")],
        [KeyboardButton(text="–ù–µ —Å–æ–≥–ª–∞—à–∞—Ç—å—Å—è")],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å–æ–≥–ª–∞—Å–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', –≤—ã –¥–∞—ë—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ "
        "–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n",
        reply_markup=keyboard
    )
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    # –∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await message.answer(
        "–£–∑–Ω–∞—Ç—å –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=builder.as_markup()
    )
    await bot.send_sticker(
        chat_id=message.chat.id,
        sticker="CAACAgQAAxkBAAEMf9hmlgcBXPluLycSsFrrxmteZZ9cDAACWQsAAoCCcVF1UQ_CXb6s9jUE"
        )
    await state.set_state(UserStates.privacy_agreement)

async def product_search(message: Message, state: FSMContext, bot: Bot) -> None:  # pylint: disable=unused-argument
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞. 
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
    :return: None
    """

    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json")
    await insert_data(message.from_user.id, user_type, 2, 0, datetime.now(), None, 1)

    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ product_search –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞",
        message.from_user.id, message.from_user.full_name
        )
    await state.set_state(FormProduct.product)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞, –∫–æ–¥–æ–º, "
        "—à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
        )

async def information(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ information –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        message.from_user.id, message.from_user.full_name
        )
    text = config.TEXT_INFORMATION_SEARCH
    text_2 = config.TEXT_INFORMATION_CARD
    text_3 = config.TEXT_INFORMATION_RESTART
    await message.answer(text)
    await message.answer(text_2)
    await message.answer(text_3)

    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    await insert_data(message.from_user.id, user_type, 3, 0, datetime.now(), None, 1)

async def visit_the_store(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ visit_the_store –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
        message.from_user.id, message.from_user.full_name
        )
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–ì–ï–ú–ú–ê", url=config.URL_SHOP)
    )

    await message.answer(
        '–ü–æ—Å–µ—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
        reply_markup=builder.as_markup(),
    )

    await message.answer(config.TEXT_VISIT_TO_STORE)
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    await insert_data(message.from_user.id, user_type, 4, 0, datetime.now(), None, 1)

async def add_discont_card(
    message: Message,
    state: FSMContext,
    bot: Bot # pylint: disable=unused-argument
    ) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormDiscontCard.number_card –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Ñ–æ—Ç–æ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –µ—ë –Ω–æ–º–µ—Ä.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
    :return: None
    """
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    await insert_data(message.from_user.id, user_type, 5, 0, datetime.now(), None, 1)
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ add_discont_card –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
        message.from_user.id, message.from_user.full_name
        )
    await state.set_state(FormDiscontCard.number_card)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –≤–∞—à–µ–π –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã.")
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–î–∏—Å–∫–æ–Ω—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã", url=config.URL_INFORMATION_DISCONT_CARD)
    )

    await message.answer(
        '–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –¥–∏—Å–∫–æ–Ω—Ç–Ω—ã—Ö –∫–∞—Ä—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ì–ï–ú–ú–ê, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.',
        reply_markup=builder.as_markup(),
    )

async def balance_discont_card(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ë–∞–ª–∞–Ω—Å –¥.–∫. –ú–∞—Å—Ç–µ—Ä".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ë–∞–ª–∞–Ω—Å –¥.–∫. –ú–∞—Å—Ç–µ—Ä".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ balance_discont_card –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –ë–∞–ª–∞–Ω—Å –¥.–∫. –ú–∞—Å—Ç–µ—Ä",
        message.from_user.id, message.from_user.full_name
        )
    filename = 'data/user_data_json/user_id_and_number_card_master.json'
    user_id = message.from_user.id
    if not await rate_limit(user_id):
        await message.answer(
            "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
            )
        logger.warning(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id=%s username=%s, –ø—Ä–µ–≤—ã—Å–∏–ª —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ balance_discont_card",
            message.from_user.id, message.from_user.full_name
            )
        return
    else:
        try:
            data_id = await read_json_file(filename) # id:–Ω–æ–º–µ—Ä–∫–∞—Ä—Ç—ã –¥–∞–Ω–Ω—ã–µ
            id_usr = str(message.from_user.id)
            number_card = data_id[id_usr] # –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            customer_info = await get_user_by_card_code(number_card)
            custom_fifeld = json.loads(customer_info['custom_field']) # –ü–æ–ª–µ –∫–∞—Å—Ç–æ–º —Ñ–∏–ª–¥
            balance = custom_fifeld['4'] # –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
            if balance is None or balance == '':
                balance = '0'

            await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {balance} —Ä.")

            user_type = await find_user_id(
                message.from_user.id,
                "data/user_data_json/user_id_to_discont_card.json"
                )
            await insert_data(message.from_user.id, user_type, 6, 0, datetime.now(), None, 1)
        except Exception as e:  # pylint: disable=broad-exception-caught
            await insert_data(message.from_user.id, user_type, 6, 0, datetime.now(), None, 0)
            logger.error(
                "–í —Ñ—É–Ω–∫—Ü–∏–∏ balance_discont_card –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
                "- –ë–∞–ª–∞–Ω—Å –¥.–∫. –ú–∞—Å—Ç–µ—Ä –∏ –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É %s",
                message.from_user.id, message.from_user.full_name, e
                )

async def ask_question(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É".
    –î–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ ask_question –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É",
        message.from_user.id, message.from_user.full_name
        )
    try:
        await message.answer("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        await state.set_state(FormAsk.ask_question)
        user_type = await find_user_id(
            message.from_user.id,
            "data/user_data_json/user_id_to_discont_card.json"
            )
        await insert_data(message.from_user.id, user_type, 37, 0, datetime.now(), None, 1)
    except Exception as e:  # pylint: disable=broad-exception-caught
        await insert_data(message.from_user.id, user_type, 37, 0, datetime.now(), None, 0)
        logger.error(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ ask_question –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
            "- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É %s",
            message.from_user.id, message.from_user.full_name, e
            )

async def answer_question(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã".
    –î–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ answer_question –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
        message.from_user.id, message.from_user.full_name
        )
    try:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, "
            "–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–≤–µ—Ç–∏—Ç—å', –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "
            "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç."
            )
        await state.set_state(FormAsk.answer_questions)
        user_type = await find_user_id(
            message.from_user.id,
            "data/user_data_json/user_id_to_discont_card.json"
            )
        await insert_data(message.from_user.id, user_type, 38, 0, datetime.now(), None, 1)
    except Exception as e:  # pylint: disable=broad-exception-caught
        await insert_data(message.from_user.id, user_type, 38, 0, datetime.now(), None, 0)
        logger.error(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ answer_question –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
            "-  –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É %s",
            message.from_user.id, message.from_user.full_name, e
            )

async def stats_start_bot(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∑–∞–ø—É—Å–∫–æ–≤ –±–æ—Ç–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ stats_start_bot –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        users_agreed = await count_users_agreed()
        user_unagreed = await count_users_unagreed()
        await message.answer(
            f"{users_agreed} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            f"{user_unagreed} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
            )
        await insert_data(message.from_user.id, user_type, 7, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 7, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ stats_start_bot –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s –æ—Ç–∫–∞–∑–∞–Ω–æ "
            "–≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def click_button_stat(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –±—ã–ª–∏ —Ä–∞–∑ –Ω–∞–∂–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ click_button_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        button_list = {
            "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞": 2,
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": 3,
            "–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω": 4,
            "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É": 5,
            "–ë–∞–ª–∞–Ω—Å –¥.–∫. –ú–∞—Å—Ç–µ—Ä": 6,
            }
        for button_key, button_value in button_list.items():
            click_button = await count_button(button_value)
            await message.answer(f"{click_button} —Ä–∞–∑ - –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {button_key}.")
        await insert_data(message.from_user.id, user_type, 8, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 8, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ click_button_stat  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s –æ—Ç–∫–∞–∑–∞–Ω–æ "
            "–≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def activity_not_card_stat(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ë–µ–∑ –∫–∞—Ä—Ç—ã".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–µ–∑ –∫–∞—Ä—Ç—ã

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ë–µ–∑ –∫–∞—Ä—Ç—ã".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ activity_not_card_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ë–µ–∑ –∫–∞—Ä—Ç—ã",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        button_list = {
            "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞": 2,
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": 3,
            "–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω": 4,
            "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É": 5,
            "–ë–∞–ª–∞–Ω—Å –¥.–∫. –ú–∞—Å—Ç–µ—Ä": 6,
            }
        for button_key, button_value in button_list.items():
            click_buttnon = await count_button_not_card(button_value)
            await message.answer(
                f"{click_buttnon} —Ä–∞–∑ - –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {button_key},"
                f" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–µ–∑ –∫–∞—Ä—Ç—ã."
                )
        await insert_data(message.from_user.id, user_type, 9, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 9, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ activity_not_card_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ë–µ–∑ –∫–∞—Ä—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def activity_card_stat(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–° –∫–∞—Ä—Ç–æ–π".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –∫–∞—Ä—Ç–æ–π

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–° –∫–∞—Ä—Ç–æ–π".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ activity_card_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –° –∫–∞—Ä—Ç–æ–π", 
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        button_list = {
            "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞": 2,
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": 3,
            "–ü–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω": 4,
            "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É": 5, 
            "–ë–∞–ª–∞–Ω—Å –¥.–∫. –ú–∞—Å—Ç–µ—Ä": 6,
            }
        type_users = {
            "–¶–£0000001": 1,
            "–†00000002": 2,
            "–¶–£0000004": 3,
            "–¶–£0000005": 4,
            "–¶–£0000003": 5
            }
        all_data = ''
        for tp_key, tp_value in type_users.items():
            for button_key, button_value in button_list.items():
                click_buttnon = await count_button_to_card(button_value, tp_value)
                text = (
                    f"{click_buttnon} —Ä–∞–∑ - –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {button_key},"
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –∫–æ—Ä—Ç–æ–π {tp_key}.\n"
                    )
                all_data += text
        await message.answer(all_data)
        await insert_data(message.from_user.id, user_type, 10, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 10, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ activity_card_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –° –∫–∞—Ä—Ç–æ–π, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def all_posts_stat(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_posts_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        all_posts = str(await get_id_message())

        type_users = {
            "–¶–£0000001": 1,
            "–†00000002": 2,
            "–¶–£0000004": 3,
            "–¶–£0000005": 4,
            "–¶–£0000003": 5
            }

        await message.answer(f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π - {all_posts}")

        for tp_key, tp_value in type_users.items():
            count = await get_id_message_user_type(tp_value)
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç–∏–ø–æ–º {tp_key},"
                f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ  - {count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π."
                )

        type_posts = {
            "text":1,
            "photo":2,
            "video":3,
            "photo/video/text/":4
            }

        for ty_ps_key, ty_ps_value  in type_posts.items():
            count = await get_type_message(ty_ps_value)
            await message.answer(f"–ü—É–±–ª–∏–∫–∞—Ü–∏–π —Ç–∏–ø–∞ {ty_ps_key}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ  - {count}.")

        unique_posts = await get_unique_posts_per_user_type()
        for row in unique_posts:
            # –ò—â–µ–º –∫–ª—é—á –≤ type_users, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—é row[0]
            user_type_key = next(
                (key for key, value in type_users.items() if value == row[0]),
                None
                )

            # –ò—â–µ–º –∫–ª—é—á –≤ type_posts, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—é row[1]
            post_type_key = next(
                (key for key, value in type_posts.items() if value == row[1]),
                None
                )
            await message.answer(
                f"–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_type_key if user_type_key else row[0]},\n"
                f"–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post_type_key if post_type_key else row[1]},\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {row[2]}"
                )

        await insert_data(message.from_user.id, user_type, 11, 0, datetime.now(), None, 1)
    else:

        await insert_data(message.from_user.id, user_type, 11, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_posts_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –í—Å–µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def all_users_stat(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_users_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        all_user = await count_users()
        await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {all_user}.")
        await insert_data(message.from_user.id, user_type, 12, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 12, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_users_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
            "—Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s", 
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def all_users_not_card_stat(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ë–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ –±–µ–∑ –∫–∞—Ä—Ç—ã.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ë–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_users_not_card_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ë–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        all_user = await count_users_not_card()
        await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∏–º–µ—é—â–∏—Ö –∫–∞—Ä—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ - {all_user}.")
        await insert_data(message.from_user.id, user_type, 13, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 13, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_users_not_card_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ë–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def all_users_card_stat(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ —Å –∫–∞—Ä—Ç–∞–º–∏.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ü–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_users_card_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ü–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        type_users = {
            "–¶–£0000001": 1,
            "–†00000002": 2,
            "–¶–£0000004": 3,
            "–¶–£0000005": 4,
            "–¶–£0000003": 5
            }
        for tp_u_key, tp_u_value in type_users.items():
            text = await count_users_to_card(tp_u_value)
            await message.answer(f"{text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞—Ä—Ç–æ–π {tp_u_key}")
        await insert_data(message.from_user.id, user_type, 14, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 14, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_users_card_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ü–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def bot_ban_stat(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞–∫–∞–º –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ bot_ban_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        count = 0
        user_id = await read_json_keys_as_ints("data/user_data_json/user_id_and_username.json")
        if user_id is not None:
            for i in user_id:
                try:
                    await bot.send_message(chat_id=i, text="–ó–¥—Ä–∞–≤—Å—Ç—É–π—Ç–µ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!")
                except TelegramForbiddenError as bl:
                    logger.info(
                        "–í —Ñ—É–Ω–∫—Ü–∏–∏ bot_ban_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
                        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É "
                        "TelegramForbiddenError - %s.",
                        message.from_user.id, message.from_user.full_name, bl
                        )
                    count += 1

            await message.answer(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            logger.error(
                "–í —Ñ—É–Ω–∫—Ü–∏–∏ bot_ban_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
                "- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –±–æ—Ç–∞.",
                message.from_user.id, message.from_user.full_name
                )
            await insert_data(message.from_user.id, user_type, 15, 0, datetime.now(), None, 1)
        else:
            logger.info(
                "–í —Ñ—É–Ω–∫—Ü–∏–∏ bot_ban_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
                "- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –±–æ—Ç–∞. "
                "–°–ø–∏—Å–æ–∫ id = None",
                message.from_user.id, message.from_user.full_name
                )
            await insert_data(message.from_user.id, user_type, 15, 0, datetime.now(), None, 0)
    else:
        await insert_data(message.from_user.id, user_type, 15, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ bot_ban_stat –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def all_requests(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ-–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_requests –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        all_req_name = await count_search_done_to_name()
        all_req_bar_text = await count_search_done_to_code_text()
        all_req_bar_photo = await count_search_done_to_code_photo()
        all_req_code = await count_search_done_to_code_product()
        all_req = all_req_name + all_req_bar_text + all_req_bar_photo + all_req_code
        await message.answer(
            f"–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ "
            f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {all_req}"
            )
        await insert_data(message.from_user.id, user_type, 16, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 16, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_requests –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã "
            "- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def popular_requests(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∞–º—ã–º —á–∞—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π–≤ –ø–æ–∏—Å–∫–µ
    '–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é' –≤–∫–ª—é—á–∞—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ popular_requests –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        list_popular_rq = await popular_search_query()
        for i in list_popular_rq:
            await message.answer(i)
        await insert_data(message.from_user.id, user_type, 17, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 17, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ popular_requests –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s –æ—Ç–∫–∞–∑–∞–Ω–æ "
            "–≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def all_requests_to_word(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ö–æ–ª-–≤–æ –ø–æ —Å–ª–æ–≤—É".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ-–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–ª–æ–≤–∞–º.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ö–æ–ª-–≤–æ –ø–æ —Å–ª–æ–≤—É".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_requests_to_word –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É "
        "- –ö–æ–ª-–≤–æ –ø–æ —Å–ª–æ–≤—É",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        all_req_name = await count_search_done_to_name()
        await message.answer(
            f"–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
            f"–ø–æ —Å–ª–æ–≤–∞–º - {all_req_name}"
            )
        await insert_data(message.from_user.id, user_type, 18, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 18, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_requests_to_word –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s –æ—Ç–∫–∞–∑–∞–Ω–æ "
            "–≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ö–æ–ª-–≤–æ –ø–æ —Å–ª–æ–≤—É, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def all_requests_to_barcode(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ö–æ–ª-–≤–æ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ-–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Ñ–æ—Ç–æ.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ö–æ–ª-–≤–æ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_requests_to_barcode –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ö–æ–ª-–≤–æ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        all_req_bar_text = await count_search_done_to_code_text()
        all_req_bar_photo = await count_search_done_to_code_photo()
        all_req = all_req_bar_text + all_req_bar_photo
        await message.answer(
            f"–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É, "
            f"–≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –ø–æ –∫–æ–¥—É —Å —Ñ–æ—Ç–æ - {all_req}"
            )
        await insert_data(message.from_user.id, user_type, 19, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 19, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_requests_to_barcode –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ö–æ–ª-–≤–æ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def all_requests_to_code(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ö–æ–ª-–≤–æ –ø–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ-–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–¥—É —Ç–æ–≤—Ä–∞.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ö–æ–ª-–≤–æ –ø–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_requests_to_code –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ö–æ–ª-–≤–æ –ø–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        all_req_bar_text = await count_search_done_to_code_product()
        await message.answer(
            f"–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ "
            f"–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞ {all_req_bar_text}"
            )
        await insert_data(message.from_user.id, user_type, 20, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 20, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ all_requests_to_code –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ "
            "–∫–æ–º–∞–Ω–¥—ã - –ö–æ–ª-–≤–æ –ø–æ –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def time_search_popular(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ß–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏/–≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ß–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ time_search_popular –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ß–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        list_time_popular = await time_serch_popular()
        for i in list_time_popular:
            await message.answer(i)
        await insert_data(message.from_user.id, user_type, 21, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 21, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ time_search_popular –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ "
            "–∫–æ–º–∞–Ω–¥—ã - –ß–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def stats_all(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç excel —Ñ–∞–π–ª –≤—Å–µ–π –ø–æ–ª—É—á–∞–µ–º–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.
    :return: None
    """
    await state.clear()
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ stats_all –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        count_bl = 0
        user_id = await read_json_keys_as_ints("data/user_data_json/user_id_and_username.json")
        if user_id is not None:
            for i in user_id:
                try:
                    await bot.send_message(chat_id=i, text="–ó–¥—Ä–∞–≤—Å—Ç—É–π—Ç–µ! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!")
                except TelegramForbiddenError:
                    count_bl += 1

        path_file_excel = await save_all_stats_to_excel(count_bl)
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±—É—Ñ–µ—Ä

        async with aiofiles.open(path_file_excel, 'rb') as file:
            file_data = await file.read()

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BufferedInputFile
        excel_file = BufferedInputFile(file_data, filename=path_file_excel)

        # –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å excel_file –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–ª—è send_document
        await bot.send_document(chat_id=message.chat.id, document=excel_file)
        os.remove(path_file_excel)
        await insert_data(message.from_user.id, user_type, 22, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 22, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ stats_all –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã "
            "- –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def send_advertisements_all(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormSendingAdv.send_all –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_all –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º",
        message.from_user.id, message.from_user.full_name
        )
    if message.from_user.id in config.USER_ADMIN:
        await state.set_state(FormSendingAdv.send_all)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–∫—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await insert_data(message.from_user.id, user_type, 23, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 23, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_all –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def send_advertisements_family(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°–µ–º–µ–π–Ω–∞—è".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormSendingAdv.send_family –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–∞—Ä—Ç–æ–π "–°–µ–º–µ–π–Ω–∞—è".

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–°–µ–º–µ–π–Ω–∞—è".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_family –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –°–µ–º–µ–π–Ω–∞—è",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id, "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        await state.set_state(FormSendingAdv.send_family)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–∫—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç—ã '–°–µ–º–µ–π–Ω–∞—è'.")
        await insert_data(message.from_user.id, user_type, 24, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 24, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_family –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –°–µ–º–µ–π–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def send_advertisements_master(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–∞—Å—Ç–µ—Ä".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormSendingAdv.send_master –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–∞—Ä—Ç–æ–π "–ú–∞—Å—Ç–µ—Ä".

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–ú–∞—Å—Ç–µ—Ä".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_master –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –ú–∞—Å—Ç–µ—Ä",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        await state.set_state(FormSendingAdv.send_master)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–∫—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç—ã '–ú–∞—Å—Ç–µ—Ä'.")
        await insert_data(message.from_user.id, user_type, 25, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 25, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_master –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –ú–∞—Å—Ç–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def send_advertisements_home(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–î–æ–º–æ–≤—ë–Ω–æ–∫".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormSendingAdv.send_home –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–∞—Ä—Ç–æ–π "–î–æ–º–æ–≤—ë–Ω–æ–∫".

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–î–æ–º–æ–≤—ë–Ω–æ–∫".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """

    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_home –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –î–æ–º–æ–≤—ë–Ω–æ–∫",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        await state.set_state(FormSendingAdv.send_home)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–∫—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç—ã '–î–æ–º–æ–≤—ë–Ω–æ–∫'.")
        await insert_data(message.from_user.id, user_type, 26, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 26, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_home –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –î–æ–º–æ–≤—ë–Ω–æ–∫, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def send_advertisements_employee(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormSendingAdv.send_employee –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–∞—Ä—Ç–æ–π "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏".

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_employee –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        await state.set_state(FormSendingAdv.send_employee)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–∫—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç—ã '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'.")
        await insert_data(message.from_user.id, user_type, 27, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 27, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_employee –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def send_advertisements_vip(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "VIP-8%".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormSendingAdv.send_vip –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–∞—Ä—Ç–æ–π "VIP-8%".

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "VIP-8%".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_vip –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - VIP-8%%%%",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        await state.set_state(FormSendingAdv.send_vip)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–∫—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç—ã 'VIP-8%'.")
        await insert_data(message.from_user.id, user_type, 28, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 28, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_vip –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - VIP-8%%%%, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def send_advertisements_family_and_home(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°–µ–º–µ–π–Ω–∞—è+–î–æ–º–æ–≤—ë–Ω–æ–∫".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormSendingAdv.send_family_and_home –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–∞—Ä—Ç–∞–º–∏
    "–°–µ–º–µ–π–Ω–∞—è" –∏ "–î–æ–º–æ–≤—ë–Ω–æ–∫".

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–°–µ–º–µ–π–Ω–∞—è+–î–æ–º–æ–≤—ë–Ω–æ–∫".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_family_and_home –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –°–µ–º–µ–π–Ω–∞—è+–î–æ–º–æ–≤—ë–Ω–æ–∫",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        await state.set_state(FormSendingAdv.send_family_and_home)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–∫—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç '–°–µ–º–µ–π–Ω–∞—è' –∏ '–î–æ–º–æ–≤—ë–Ω–æ–∫'."
            )
        await insert_data(message.from_user.id, user_type, 29, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 29, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_advertisements_family_and_home  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –°–µ–º–µ–π–Ω–∞—è+–î–æ–º–æ–≤—ë–Ω–æ–∫, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ %s",
            message.from_user.id, message.from_user.full_name, config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)

async def send_all_without_master(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–í—Å–µ–º –∫—Ä–æ–º–µ –ú–∞—Å—Ç–µ—Ä".
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FormSendingAdv.send_family_and_home –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –∞–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    —Å –∫–∞—Ä—Ç–∞–º–∏ "–°–µ–º–µ–π–Ω–∞—è" –∏ "–î–æ–º–æ–≤—ë–Ω–æ–∫".

    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—É "–í—Å–µ–º –∫—Ä–æ–º–µ –ú–∞—Å—Ç–µ—Ä".
    :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: None
    """
    logger.info(
        "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_all_without_master  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id = %s name = %s "
        "–≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É - –í—Å–µ–º –∫—Ä–æ–º–µ –ú–∞—Å—Ç–µ—Ä",
        message.from_user.id, message.from_user.full_name
        )
    user_type = await find_user_id(
        message.from_user.id,
        "data/user_data_json/user_id_to_discont_card.json"
        )
    if message.from_user.id in config.USER_ADMIN:
        await state.set_state(FormSendingAdv.send_all_withot_master)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–∫—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –∫–∞—Ä—Ç—ã '–ú–∞—Å—Ç–µ—Ä'.")
        await insert_data(message.from_user.id, user_type, 36, 0, datetime.now(), None, 1)
    else:
        await insert_data(message.from_user.id, user_type, 36, 0, datetime.now(), None, 0)
        logger.warning(
            "–í —Ñ—É–Ω–∫—Ü–∏–∏ send_all_without_master –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id = %s name = %s "
            "–æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç–ø—É–ø–µ –∫–æ–º–∞–Ω–¥—ã - –í—Å–µ–º –∫—Ä–æ–º–µ –ú–∞—Å—Ç–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ "
            "–Ω–µ—Ç –≤ %s", message.from_user.id, message.from_user.full_name,
            config.USER_ADMIN
            )
        await state.clear()
        await general_menu(message, state)
